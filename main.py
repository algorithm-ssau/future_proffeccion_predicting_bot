import json
import time
import requests
import random
import nest_asyncio
import base64
from natasha import MorphVocab
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from professions import professions
from cities import cities
import BytesIO

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º nested event loop
nest_asyncio.apply()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
morph = MorphVocab()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –±—É–¥—É—â–µ–≥–æ.\n"
        "–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è –∏ –ø–æ–ª—É—á–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ!"
    )

async def generate_prediction(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    name = update.message.text
    profession = random.choice(professions)
    city = random.choice(cities)

    # –°–∫–ª–æ–Ω—è–µ–º —Å–ª–æ–≤–∞
    profession_acc = decline_word(profession, 'ablt')  # –¢–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂
    city_prep = decline_word(city, 'loct')  # –ü—Ä–µ–¥–ª–æ–∂–Ω—ã–π –ø–∞–¥–µ–∂

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    response = (
        f"{name}, —á–µ—Ä–µ–∑ 10 –ª–µ—Ç —Ç—ã –±—É–¥–µ—à—å:\n"
        f"üî• *{profession_acc}* üî•\n"
        f"üåé –í *{city_prep}*!\n\n"
        "–≠—Ç–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é ü§ñ"
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
    loading_message = await show_loading_messages(update, context)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_prompt = f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profession} –≤ 2035 –≥–æ–¥—É. –ü–æ–∫–∞–∂–∏ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ —ç—Ç–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"
    image_data = await generate_image(image_prompt)

    if image_data:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        await loading_message.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–∞–π–ª
        await update.message.reply_photo(
            photo=BytesIO(image_data),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º BytesIO –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            caption=response,
            parse_mode="Markdown"
        )
    else:
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await loading_message.delete()
        await update.message.reply_text(response, parse_mode="Markdown")


def run_bot():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    application = Application.builder().token("").build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, generate_prediction))

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    loop = asyncio.get_event_loop()
    loop.run_until_complete(application.run_polling())


if __name__ == "main":
    run_bot()


# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Fusion Brain API
class Text2ImageAPI:
    def init(self, url, api_key, secret_key):
        self.URL = url
        self.AUTH_HEADERS = {
            'X-Key': f'Key {api_key}',
            'X-Secret': f'Secret {secret_key}',
        }

    def get_model(self):
        response = requests.get(self.URL + 'key/api/v1/models', headers=self.AUTH_HEADERS)
        data = response.json()
        return data[0]['id']

    def generate(self, prompt, model, images=1, width=1024, height=1024):
        params = {
            "type": "GENERATE",
            "numImages": images,
            "width": width,
            "height": height,
            "generateParams": {
                "query": f"{prompt}"
            }
        }

        data = {
            'model_id': (None, model),
            'params': (None, json.dumps(params), 'application/json')
        }
        response = requests.post(self.URL + 'key/api/v1/text2image/run', headers=self.AUTH_HEADERS, files=data)
        data = response.json()
        return data['uuid']

    def check_generation(self, request_id, attempts=10, delay=10):
        while attempts > 0:
            response = requests.get(self.URL + 'key/api/v1/text2image/status/' + request_id, headers=self.AUTH_HEADERS)
            data = response.json()
            if data['status'] == 'DONE':
                return data['images']

            attempts -= 1
            time.sleep(delay)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
fusion_brain_api = Text2ImageAPI(
    url='https://api-key.fusionbrain.ai/',
    api_key='1F9C14583FF95C530D2321E1C60A2200',
    secret_key='D68F219B46DCAFBF1E49E24094142B12'
)

def decline_word(word: str, case: str) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        parsed = morph.parse(word)
        if parsed and parsed[0].inflect({case}):
            return parsed[0].inflect({case}).word
        return word
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ {word}: {str(e)}")
        return word

async def generate_image(prompt: str) -> bytes:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Fusion Brain API"""
    try:
        model_id = fusion_brain_api.get_model()
        uuid = fusion_brain_api.generate(prompt, model_id)
        images = fusion_brain_api.check_generation(uuid)
        if images:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –≤ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            return base64.b64decode(images[0])
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

async def show_loading_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–Ω–∏–º–∞—Ü–∏—è —Å –∏–∑–º–µ–Ω—è—é—â–∏–º–∏—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    messages  = [
    "–ù–µ–π—Ä–æ—Å–µ—Ç—å —Ä–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—ã —Ç–∞—Ä–æ üÉè",
    "–Ø–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ —Å–º–æ—Ç—Ä—è—Ç –≤ –±—É–¥—É—â–µ–µ üëÄ",
    "–ê–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤—Å–µ—Ö —è—Å–Ω–æ–≤–∏–¥—è—â–∏—Ö üîÆ",
    "–ò–∑—É—á–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π üìö",
    "–ù–µ–π—Ä–æ—Å–µ—Ç—å –≥–∞–¥–∞–µ—Ç –Ω–∞ –∫–æ—Ñ–µ–π–Ω–æ–µ –≥—É—â–µ ‚òïÔ∏è",
    "–ù–µ–π—Ä–æ—Å–µ—Ç—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–≤–µ–∑–¥–Ω—ã–µ –∫–∞—Ä—Ç—ã üåå",
    "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏–∑—É—á–∞–µ—Ç —Ö—Ä—É—Å—Ç–∞–ª—å–Ω—ã–π —à–∞—Ä üîÆ",
    "–ê–ª–≥–æ—Ä–∏—Ç–º—ã –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç —Å—É–¥—å–±—É –ø–æ –ª–∏–Ω–∏—è–º —Ä—É–∫–∏ ‚úã",
    "–ù–µ–π—Ä–æ—Å–µ—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—Ç—Å—è —Å –æ—Ä–∞–∫—É–ª–æ–º üßô‚Äç‚ôÇÔ∏è",
    "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –¥—Ä–µ–≤–Ω–∏–µ —Å–≤–∏—Ç–∫–∏ üìú",
    "–ò–ò –∏–∑—É—á–∞–µ—Ç —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è —á–µ–ª–æ–≤–µ–∫–∞ üåü",
    "–ù–µ–π—Ä–æ—Å–µ—Ç—å —á–∏—Ç–∞–µ—Ç –±—É–¥—É—â–µ–µ –ø–æ –æ–±–ª–∞–∫–∞–º ‚òÅÔ∏è",
    "–ê–ª–≥–æ—Ä–∏—Ç–º—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –≤–∏–±—Ä–∞—Ü–∏–∏ –≤—Å–µ–ª–µ–Ω–Ω–æ–π üå†",
    "–ò–ò —Ä–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç –ø–∞—Å—å—è–Ω—Å –∏–∑ –∫–∞—Ä—Ç —Å—É–¥—å–±—ã üé¥",
    "–ù–µ–π—Ä–æ—Å–µ—Ç—å –∏–∑—É—á–∞–µ—Ç —É–∑–æ—Ä—ã –Ω–∞ –∫–æ—Ñ–µ–π–Ω–æ–π –≥—É—â–µ ‚òïÔ∏è",
    "–ê–ª–≥–æ—Ä–∏—Ç–º—ã –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç –±—É–¥—É—â–µ–µ –ø–æ –ø–æ–ª–µ—Ç—É –ø—Ç–∏—Ü ü¶Ö",
    "–ò–ò —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –ø–æ—Å–ª–∞–Ω–∏—è –∏–∑ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –º–∏—Ä–æ–≤ üåå",
    "–ù–µ–π—Ä–æ—Å–µ—Ç—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Ç–æ–∫–∏ üå™",
    "–ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏–∑—É—á–∞—é—Ç –≤–ª–∏—è–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç –Ω–∞ —Å—É–¥—å–±—É ü™ê",
    "–ò–ò –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –±—É–¥—É—â–µ–µ –ø–æ –ª–∏–Ω–∏—è–º –Ω–∞ –ø–µ—Å–∫–µ üèñ"
]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = await update.message.reply_text(messages[0])

    # –ú–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
    for msg in messages[1:]:
        await asyncio.sleep(5)
        await message.edit_text(msg)

    return message