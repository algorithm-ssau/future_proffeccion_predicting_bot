import logging
import os
import json
import base64
from io import BytesIO
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InputMediaPhoto
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)
from professions_dict import professions  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
NAME, GENDER, IT_INTEREST, MUSIC, DRINK, HOBBIES = range(6)

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
GENDER_KEYBOARD = [["–ü–∞—Ä–µ–Ω—å", "–î–µ–≤—É—à–∫–∞"]]
IT_KEYBOARD = [["–†–æ–±–æ—Ç—ã", "–ë–∏–æ—Ç–µ—Ö"], ["–ò–ò", "–ë—ç–∫–µ–Ω–¥"], ["–§—Ä–æ–Ω—Ç–µ–Ω–¥", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"]]
MUSIC_KEYBOARD = [["–Ø –º–µ–ª–æ–º–∞–Ω", "–†–æ–∫"], ["–•–∏–ø-—Ö–æ–ø", "–ù–∏—á–µ–≥–æ –∏–∑ —ç—Ç–æ–≥–æ"], ["–ö–ª–∞—Å—Å–∏–∫–∞", "–î–∂–∞–∑"]]
DRINK_KEYBOARD = [["–ö–æ—Ñ–µ", "–ß–∞–π"], ["–ù–∏ —Ç–æ, –Ω–∏ –¥—Ä—É–≥–æ–µ"]]
HOBBIES_KEYBOARD = [["–°–ø–æ—Ä—Ç", "–ö–∏–Ω–æ"], ["–ò–≥—Ä—ã", "–ö–Ω–∏–≥–∏"], ["–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–°–∫—Ä–æ–ª–ª–∏—Ç—å –ª–µ–Ω—Ç—É"]]

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
PROFESSIONS_IMAGES_DIR = "profession_images_sequential"
user_data = {}

# Mapping –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∫–ª—é—á–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
PROFESSION_MAPPING = professions


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        reply_markup=ReplyKeyboardRemove()
    )
    return NAME


async def handle_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data[update.message.from_user.id] = {"name": update.message.text}
    await update.message.reply_text(
        f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {update.message.text}!\n\n–ö—Ç–æ —Ç—ã?",
        reply_markup=ReplyKeyboardMarkup(GENDER_KEYBOARD, one_time_keyboard=True)
    )
    return GENDER


async def handle_gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data[update.message.from_user.id]["gender"] = update.message.text
    await update.message.reply_text(
        "–ß—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –≤ IT?",
        reply_markup=ReplyKeyboardMarkup(IT_KEYBOARD, one_time_keyboard=True)
    )
    return IT_INTEREST


async def handle_it(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data[update.message.from_user.id]["it_interest"] = update.message.text
    await update.message.reply_text(
        "–ö–∞–∫—É—é –º—É–∑—ã–∫—É –ª—é–±–∏—à—å?",
        reply_markup=ReplyKeyboardMarkup(MUSIC_KEYBOARD, one_time_keyboard=True)
    )
    return MUSIC


async def handle_music(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data[update.message.from_user.id]["music"] = update.message.text
    await update.message.reply_text(
        "–ö–æ—Ñ–µ –∏–ª–∏ —á–∞–π?",
        reply_markup=ReplyKeyboardMarkup(DRINK_KEYBOARD, one_time_keyboard=True)
    )
    return DRINK


async def handle_drink(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data[update.message.from_user.id]["drink"] = update.message.text
    await update.message.reply_text(
        "–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?",
        reply_markup=ReplyKeyboardMarkup(HOBBIES_KEYBOARD, one_time_keyboard=True)
    )
    return HOBBIES


async def get_profession_image(profession_name: str, gender: str):
    """–ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        image_path = os.path.join(PROFESSIONS_IMAGES_DIR, profession_name, f"{gender}.json")
        logger.info(f"{image_path}")

        if not os.path.exists(image_path):
            return None

        with open(image_path, 'r', encoding='utf-8') as f:
            image_data = json.load(f)
            return base64.b64decode(image_data["image_base64"])
    except Exception as e:
        logger.error(f"Error loading image: {e}")
        return None


async def handle_hobbies(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    answers = user_data[update.message.from_user.id]
    answers["hobbies"] = update.message.text

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ (–∫–æ—Ä—Ç–µ–∂ –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤)
    profile_key = (
        answers.get('gender', ''),
        answers.get('it_interest', ''),
        answers.get('music', ''),
        answers.get('drink', ''),
        answers.get('hobbies', '')
    )
    # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—ã–≤–µ–¥–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–ª—é—á
    logger.info(f"–ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –¥–ª—è –∫–ª—é—á–∞: {profile_key}")

    # –ò—â–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –≤ –Ω–∞—à–µ–º mapping-—Å–ª–æ–≤–∞—Ä–µ
    profession_base_name = PROFESSION_MAPPING.get(profile_key)

    if not profession_base_name:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –¥–ª—è –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤")
        return ConversationHandler.END

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å–ª–æ–≤–∞—Ä—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
    gender_suffix = "male" if answers.get('gender') == "–ü–∞—Ä–µ–Ω—å" else "female"
    profession_key = f"{profession_base_name}"

    messages = [
        "–ù–µ–π—Ä–æ—Å–µ—Ç—å —Ä–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—ã —Ç–∞—Ä–æ üÉè",
        "–Ø–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ —Å–º–æ—Ç—Ä—è—Ç –≤ –±—É–¥—É—â–µ–µ üëÄ",
        "–ê–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤—Å–µ—Ö —è—Å–Ω–æ–≤–∏–¥—è—â–∏—Ö üîÆ",
        "–ò–∑—É—á–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π üìö",
        "–ù–µ–π—Ä–æ—Å–µ—Ç—å –≥–∞–¥–∞–µ—Ç –Ω–∞ –∫–æ—Ñ–µ–π–Ω–æ–µ –≥—É—â–µ ‚òïÔ∏è",
        "–ù–µ–π—Ä–æ—Å–µ—Ç—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–≤–µ–∑–¥–Ω—ã–µ –∫–∞—Ä—Ç—ã üåå"
    ]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = await update.message.reply_text(messages[0])

    # –ú–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 0.7 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –±–æ–ª–µ–µ –¥–∏–Ω–∞–º–∏—á–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
    for msg in messages[1:]:
        await asyncio.sleep(1)
        await message.edit_text(msg)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    await asyncio.sleep(0.7)
    await message.edit_text("üîÆ –í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç –ò–ò –≥–æ—Ç–æ–≤–æ!")
    await asyncio.sleep(1)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = (
        f"üë§ {answers['name']}\n"
        f"üöÄ –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ —á–µ—Ä–µ–∑ 10 –ª–µ—Ç —Ç—ã –±—É–¥–µ—à—å {profession_base_name}\n"

    )

    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    try:
        image_bytes = await get_profession_image(profession_key, gender_suffix)
        if image_bytes:
            await update.message.reply_photo(
                photo=BytesIO(image_bytes),
                caption=message_text
            )
        else:
            await update.message.reply_text(
                f"{message_text}\n\n–ö–∞—Ä—Ç–∏–Ω–∫–∞ –µ—â–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞"
            )
    except Exception as e:
        logger.error(f"Error sending image: {e}")
        await update.message.reply_text(message_text)

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


def main():
    application = ApplicationBuilder().token("").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_name)],
            GENDER: [MessageHandler(filters.Regex('^(–ü–∞—Ä–µ–Ω—å|–î–µ–≤—É—à–∫–∞)$'), handle_gender)],
            IT_INTEREST: [MessageHandler(filters.Regex('^(–†–æ–±–æ—Ç—ã|–ë–∏–æ—Ç–µ—Ö|–ò–ò|–ë—ç–∫–µ–Ω–¥|–§—Ä–æ–Ω—Ç–µ–Ω–¥|–ê–Ω–∞–ª–∏—Ç–∏–∫–∞)$'), handle_it)],
            MUSIC: [
                MessageHandler(filters.Regex('^(–Ø –º–µ–ª–æ–º–∞–Ω|–†–æ–∫|–•–∏–ø-—Ö–æ–ø|–ù–∏—á–µ–≥–æ –∏–∑ —ç—Ç–æ–≥–æ|–ö–ª–∞—Å—Å–∏–∫–∞|–î–∂–∞–∑)$'), handle_music)],
            DRINK: [MessageHandler(filters.Regex('^(–ö–æ—Ñ–µ|–ß–∞–π|–ù–∏ —Ç–æ, –Ω–∏ –¥—Ä—É–≥–æ–µ)$'), handle_drink)],
            HOBBIES: [MessageHandler(filters.Regex('^(–°–ø–æ—Ä—Ç|–ö–∏–Ω–æ|–ò–≥—Ä—ã|–ö–Ω–∏–≥–∏|–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ|–°–∫—Ä–æ–ª–ª–∏—Ç—å –ª–µ–Ω—Ç—É)$'),
                                     handle_hobbies)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    application.add_handler(conv_handler)
    application.run_polling()


if __name__ == '__main__':
    main()
